
do
    local C = {
        "bG9jYWwgUmF5ZmllbGQgPSBsb2Fkc3RyaW5nKGdhbWU6SHR0cEdldCgiaHR0cHM6Ly9zaXJpdXMubWVudS9yYXlmaWVsZCIpKCkKCmxvY2FsIFdpbmRvdyA9IFJheWZpZWxkOkNyZWF0ZVdpbmRvdyggewogICAgTmFtZSA9ICJLcnlPbmlvbiB8IEZPUlNBS0VOIiwKICAgIExvYWRpbmdUaXRsZSA9ICJXZWxjb21lIHRvIEtyeU9uaW9uIiwKICAgIExvYWRpbmdTdWJ0aXRsZSA9ICJieSBl",
        "aHJlci52ZXIiLAogICAgQ29uZmlndXJhdGlvblNhdmluZyA9IHsKICAgICAgICBFbmFibGVkID0gdHJ1ZSwKICAgICAgICBGb2xkZXJOYW1lID0gIk9uaW9uSXNGb3JzYWtlbiIsCiAgICAgICAgRmlsZU5hbWUgPSAiT25pb25LcnlGb3JzYWtlbiIKICAgIH0sCiAgICBLZXlTeXN0ZW0gPSB0cnVlLAogICAgS2V5U2V0dGluZ3MgPSB7CiAgICAgICAgVGl0bGUgPSAiS3J5T25pb24iLAogICAgICAgIFN1YnRpdGxlID0gIktyeU9uaW9uIGtleSIsCiAgICAgICAgTm90ZSA9ICJ0cnkgT25pb24iLAogICAgICAgIFNhdmVLZXkgPSB0cnVlLAogICAgICAgIEdyYWJLZXlGcm9tU2l0ZSA9IGZhbHNlLAogICAgICAgIEtleSA9IHsiT25pb24iLCAiT05JT04iLCAiZWhoaCIsICJPTklPTklTR29vRCJ9CiAgICB9Cn0pCgotLSBUYWJzIC0tCmxvY2FsIFRoaW5nc1RhYiA9IFdpbmRvdzpDcmVhdGVUYWIoIlRoaW5ncyIsIDEzMDYyOTA0MTgxKQpsb2NhbCBLcnl0aGVyVGFiID0gV2luZG93OkNyZWF0ZVRhYigiS3J5dGhlciIsIDEzMDYyOTA0MTgxKQpsb2NhbCBTdGFtaW5hVGFiID0gV2luZG93OkNyZWF0ZVRhYigiU3RhbWluYSIsIDEzMDYyOTA0MTgxKQpsb2NhbCBQbGF5ZXJUYWIgPSBXaW5kb3c6Q3JlYXRlVGFiKCJQbGF5ZXIiLCAxMzA2MjkwNDE4MSkKCi0tIPCfh7M",
        "gRm9sZGVycwpsb2NhbCBwbGF5ZXJzRm9sZGVyID0gd29ya3NwYWNlOldhaXRGb3JDaGlsZCgiUGxheWVycyIpCmxvY2FsIGtpbGxlcnNGb2xkZXIgPSBwbGF5ZXJzRm9sZGVyOldhaXRGb3JDaGlsZCgiS2lsbGVycyIpCmxvY2FsIHN1cnZpdm9yc0ZvbGRlciA9IHBsYXllcnNGb2xkZXI6V2FpdEZvckNoaWxkKCJTdXJ2aXZvcnMiKQoKLS0gVGFibGVhcyBFU1AKbG9jYWwgZXNwT2JqZWN0c0tpbGxlcnMsIGVzcE9iamVjdHNTdXJ2aXZvcnMsIGdlbmVyYXRvckVTUE9iamVjdHMgPSB7fSwge30sIHt9CmxvY2FsIGVzcEVuYWJsZWRLaWxsZXJzLCBlc3BFbmFibGVkU3Vydml2b3JzLCBnZW5lcmF0b3JFU1BFbmFibGVkID0gZmFsc2UsIGZhbHNlLCBmYWxzZQoKLS0gIPCfh7M",
        "gQ3JpYXIgRVNQIEtpbGxlcnMKbG9jYWwgZnVuY3Rpb24gY3JlYXRlS2lsbGVyRVNQKG1vZGVsKQogICAgaWYgbm90IG1vZGVsOklzQSgiTW9kZWwiKSBvciBlc3BPYmplY3RzS2lsbGVyc1ttb2RlbF0gdGhlbiByZXR1cm4gZW5kCiAgICBsb2NhbCBodW1hbm9pZFJvb3RQYXJ0ID0gbW9kZWw6RmluZEZpcnN0Q2hpbGQoIkh1bWFub2lkUm9vdFBhcnQiKSBvciBtb2RlbC5QcmltYXJ5UGFydAogICAgaWYgbm90IGh1bWFub2lkUm9vdFBhcnQgdGhlbiByZXR1cm4gZW5kCgogICAgbG9jYWwgaGlnaGxpZ2h0ID0gSW5zdGFuY2UubmV3KCJIaWdobGlnaHQiKQogICAgaGlnaGxpZ2h0LkZpbGxDb2xvciA9IENvbG9yMy5mcm9tUlRCKDI1NSwgMCwgMCkKICAgIGhpZ2hsaWdodC5GaWxsVHJhbnNwYXJlbmN5ID0gMC41CiAgICBoaWdobGlnaHQuT3V0bGluZUNvbG9yID0gQ29sb3IzLmZyb21SVEIoMTM5LCAwLCAwKQogICAgaGlnaGxpZ2h0LlBhcmVudCA9IG1vZGVsCgogICAgbG9jYWwgYmlsbGJvYXJkID0gSW5zdGFuY2UubmV3KCJCaWxsYm9hcmRHdWkiKQogICAgYmlsbGJvYXJkLkFkb3JuZWUgPSBodW1hbm9pZFJvb3RQYXJ0CiAgICBiaWxsYm9hcmQuU2l6ZSA9IFVEaW0yLm5ldygwLCAxMDAsIDAsIDI1KQogICAgYmlsbGJvYXJkLlN0dWRzT2Zmc2V0ID0gVmVjdG9yMy5uZXcoMCwgMiwgMCkKICAgIGJpbGxib2FyZC5BbHdheXNPblRvcCA9IHRydWUKICAgIGJpbGxib2FyZC5QYXJlbnQgPSBtb2RlbAoKICAgIGxvY2FsIHRleHQgPSBJbnN0YW5jZS5uZXcoIlRleHRMYWJlbCIpCiAgICB0ZXh0LlNpemUgPSBVRGltMi5uZXcoMSwgMCwgMSwgMCkKICAgIHRleHQuQmFja2dyb3VuZFRyYW5zcGFyZW5jeSA9IDEKICAgIHRleHQuVGV4dENvbG9yMyA9IENvbG9yMy5mcm9tUlRCKDI1NSwgMCwgMCkKICAgIHRleHQuVGV4dFN0cm9rZVRyYW5zcGFyZW5jeSA9IDAKICAgIHRleHQuVGV4dFN0cm9rZUNvbG9yMyA9IENvbG9yMy5mcm9tUlRCKDEzOSwgMCwgMCkKICAgIHRleHQuVGV4dCA9IG1vZGVsLk5hbWUKICAgIHRleHQuRm9udCA9IEVudW0uRm9udC5TcGVjaWFsRWxpdGUKICAgIHRleHQuVGV4dFNjYWxlZCA9IHRydWUKICAgIHRleHQuUGFyZW50ID0gYmlsbGJvYXJkCgogICAgZXNwT2JqZWN0c0tpbGxlcnNbbW9kZWxdID0geyBoaWdobGlnaHQsIGJpbGxib2FyZCB9CmVuZAoKbG9jYWwgZnVuY3Rpb24gcmVtb3ZlS2lsbGVyRVNQKG1vZGVsKQogICAgaWYgZXNwT2JqZWN0c0tpbGxlcnNbbW9kZWxdIHRoZW4KICAgICAgICBmb3IgXywgb2JqIGluIGlwYWlycyhlc3BPYmplY3RzS2lsbGVyc1ttb2RlbF0pIGRvCiAgICAgICAgICAgIGlmIG9iaiBhbmQgb2JqLlBhcmVudCB0aGVuIG9iajpEZXN0cm95KCkgZW5kCiAgICAgICAgZW5kCiAgICAgICAgZXNwT2JqZWN0c0tpbGxlcnNbbW9kZWxdID0gbmlsCiAgICBlbmQKZW5kCgpsb2NhbCBmdW5jdGlvbiB0b2dnbGVLaWxsZXJFU1AoaW5hYmxlKQogICAgaWYgZW5hYmxlIHRoZW4KICAgICAgICBmb3IgbW9kZWwgaW4gcGFpcnMoZXNwT2JqZWN0c0tpbGxlcnMpIGRvIHJlbW92ZUtpbGxlckVTUChtb2RlbCkgZW5kCiAgICAgICAgZm9yIF8sIG1vZGVsIGluIGlwYWlycyhraWxsZXJzRm9sZGVyOkdldENoaWxkcmVuKCkpIGRvIGNyZWF0ZUtpbGxlckVTUChtb2RlbCkgZW5kCiAgICAgICAgZXNwT2JqZWN0c0tpbGxlcnMuY29ubmVjdGlvbnMgPSB7CiAgICAgICAgICAgIGtpbGxlcnNGb2xkZXIuQ2hpbGRBZGRlZDpDb25uZWN0KGZ1bmN0aW9uKG1vZGVsKQogICAgICAgICAgICAgICAgdGFzay53YWl0KDAuNSkKICAgICAgICAgICAgICAgIGNyZWF0ZUtpbGxlckVTUChtb2RlbCkKICAgICAgICAgICAgZW5kKSwKICAgICAgICAgICAga2lsbGVycyBGb2xkZXIuQ2hpbGRSZW1vdmVkOkNvbm5lY3QocmVtb3ZlS2lsbGVyRVNQKQogICAgICAgIH0KICAgIGVsc2UKICAgICAgICBmb3IgbW9kZWwgaW4gcGFpcnMoZXNwT2JqZWN0c0tpbGxlcnMpIGRvIHJlbW92ZUtpbGxlckVTUChkZWwgKSB0aGVuIGVuZAogICAgICAgIGlmIGVzcE9iamVjdHNL aWxsZXJzLmNvbm5lY3Rpb25zIHRoZW4KICAgICAgICAgICAgZm9yIF8sIGMgaW4gaXBhaXJzKGVzcE9iamVjdHNL aWxsZXJzLmNvbm5lY3Rpb25zKSBkbyBjOkRpc2Nvbm5lY3QoK SBlbmQKICAgICAgICAgICAgZXNwT2JqZWN0c0tpbGxlcnMuY29ubmVjdGlvbnMgPSBuaWwKICAgICAgICBlbmQKICAgIGVuZAplbmQK",
        "LS0gIPCfh7MgU3Vydml2b3IgRVNQIChIZWFsdGgpCmxvY2FsIGZ1bmN0aW9uIGNyZWF0ZVN1cnZpdm9yRVNQKG1vZGVsKQogICAgaWYgbm90IG1vZGVsOklzQSgiTW9kZWwiKSBvciBlc3BPYmplY3RzU3Vydml2b3JzW21vZGVsXSB0aGVuIHJldHVybiBlbmQKICAgIGxvY2FsIGh1bWFub2lkUm9vdFBhcnQgPSBtb2RlbDpGaW5kRmlyc3RDaGlsZCgiSHVtYW5vaWRSb290UGFydCIpIG9yIG1vZGVsLlByaW1hcnlQYXJ0CiAgICBpZiBub3QgaHVtYW5vaWRSb290UGFydCB0aGVuIHJldHVybiBlbmQKCiAgICBsb2NhbCBoaWdobGlnaHQgPSBJbnN0YW5jZS5uZXcoIkhpZ2hsaWdodCIpCiAgICBoaWdobGlnaHQuRmlsbENvbG9yID0gQ29sb3IzLmZyb21SVEIoMjExLCAyMTEsIDIxMSkKICAgIGhpZ2hsaWdodC5GaWxsVHJhbnNwYXJlbmN5ID0gMC41CiAgICBoaWdobGlnaHQuT3V0bGluZUNvbG9yID0gQ29sb3IzLmZyb21SVEIoMjU1LCAyNTUsIDI1NSkKICAgIGhpZ2hsaWdodC5QYXJlbnQgPSBtb2RlbAoKICAgIGxvY2FsIGJpbGxib2FyZCA9IEluc3RhbmNlLm5ldygiQmlsbGJvYXJkR3VpIikKICAgIGJpbGxib2FyZC5BZG9ybmVlID0gaHVtYW5vaWRSb290UGFydAogICAgYmlsbGJvYXJkLlNpemUgPSBVRGltMi5uZXcoMCwgMjAwLCAwLCA1MCkKICAgIGJpbGxib2FyZC5TdHVkc09mZnNldCA9IFZlY3RvcjMubmV3KDA sIDIsIDApCiAgICBiaWxsYm9hcmQuQWx3YXlzT25Ub3AgPSB0cnVlCiAgICBiaWxsYm9hcmQuUGFyZW50ID0gbW9kZWwKCiAgICBsb2NhbCBuYW1lVGV4dCA9IEluc3RhbmNlLm5ldygiVGV4dExhYmVsIikKICAgIG5hbWVUZXh0LlNpemUgPSBVRGltMi5uZXcoMSwgMCwgMC41LCAwKQogICAgbmFtZVRleHQuQmFja2dyb3VuZFRyYW5zcGFyZW5jeSA9IDEKICAgIG5hbWVUZXh0LlRleHRDb2xvciMgPSBDb2xvciMuZnJvbVJUQigyNTUsIDI1NSwgMjU1KQogICAgbmFtZVRleHQuVGV4dCA9IG1vZGVsLk5hbWUKICAgIG5hbWVUZXh0LkZvbnQgPSBFbnVtLkZvbnQuU3BlY2lhbEVsaXRlCiAgICBuYW1lVGV4dC5UZXh0U2NhbGVkID0gdHJ1ZQogICAgbmFtZVRleHQuUGFyZW50ID0gYmlsbGJvYXJkCgogICAgbG9jYWwgaGVhbHRoVGV4dCA9IEluc3RhbmNlLm5ldygiVGV4dExhYmVsIikKICAgIGhlYWx0aFRleHQuUG9zaXRpb24gPSBVRGltMi5uZXcoMCwgMCwgMC41LCAwKQogICAgaGVhbHRoVGV4dC5TaXplID0gVURpbTIubmV3KDEsIDAsIDAuNSwgMCkKICAgIGhlYWx0aFRleHQuQmFja2dyb3VuZFRyYW5zcGFyZW5jeSA9IDEKICAgIGhlYWx0aFRleHQuVGV4dENvbG9yMyA9IENvbG9yMy5mcm9tUlRCKDI1NSwgMjU1LCAyNTUpCiAgICBoZWFsdGhUZXh0LkZvbnQgPSBFbnVtLkZvbnQuU3BlY2lhbEVsaXRlCiAgICBoZWFsdGhUZXh0LlRleHRTY2FsZWQgPSB0cnVlCiAgICBoZWFsdGhUZXh0LlBhcmVudCA9IGJpbGxib2FyZAoKICAgIGxvY2FsIGh1bWFub2lkID0gbW9kZWw6RmluZEZpcnN0Q2hpbGRPZkNsYXNzKCJIdW1hbm9pZCIpCiAgICBpZiBodW1hbm9pZCB0aGVuCiAgICAgICAgaGVhbHRoVGV4dC5UZXh0ID0gc3RyaW5nLmZvcm1hdCgiSGVhbHRoOiAlZC8lZCIsIGh1bWFub2lkLkhlYWx0aCwgaHVtYW5vaWQuTWF4SGVhbHRoKQogICAgICAgIGxvY2FsIGNvbm4xID0gaHVtYW5vaWQuSGVhbHRoQ2hhbmdlZDpDb25uZWN0KGZ1bmN0aW9uKCkKICAgICAgICAgICAgaGVhbHRoVGV4dC5UZXh0ID0gc3RyaW5nLmZvcm1hdCgiSGVhbHRoOiAlZC8lZCIsIGh1bWFub2lkLkhlYWx0aCwgaHVtYW5vaWQuTWF4SGVhbHRoKQogICAgICAgIGVuZCkKICAgICAgICBsb2NhbCBjb25uMiA9IGh1bWFub2lkOkdldFByb3BlcnR5Q2hhbmdlZFNpZ25hbCg",
        "iTWF4SGVhbHRoIik6Q29ubmVjdChmdW5jdGlvbigpCiAgICAgICAgICAgIGhlYWx0aFRleHQuVGV4dCA9IHN0cmluZy5mb3JtYXQoIkhlYWx0aDogJWQvJWQiLCBodW1hbm9pZC5IZWFsdGgsIGh1bWFub2lkLk1heEhlYWx0aCkKICAgICAgICBlbmQpCiAgICAgICAgZXNwT2JqZWN0c1N1cnZpdm9yc1ttb2RlbF0gPSB7IGhpZ2hsaWdodCwgYmlsbGJvYXJkLCBjb25uMSwgY29ubjIgfQogICAgZWxzZQogICAgICAgIGhlYWx0aFRleHQuVGV4dCA9ICJIZWFsdGg6ID8/PyIKICAgICAgICBlc3BPYmplY3RzU3Vydml2b3JzW21vZGVsXSA9IHsgaGlnaGxpZ2h0LCBiaWxsYm9hcmQgfQogICAgZW5kCmVuZAoKbG9jYWwgZnVuY3Rpb24gcmVtb3ZlU3Vydml2b3JFU1AobW9kZWwpCiAgICBpZiBlc3BPYmplY3RzU3Vydml2b3JzW21vZGVsXSB0aGVuCiAgICAgICAgZm9yIF8sIG9iaiBpbiBpcGFpcnMoZXNwT2JqZWN0c1N1cnZpdm9yc1ttb2RlbF0pIGRvCiAgICAgICAgICAgIGlmIHR5cGVvZihvYmopID09ICJSQlhTY3JpcHRDb25uZWN0aW9uIiB0aGVuIG9iaqpEaXNjb25uZWN0KCkKICAgICAgICAgICAgZWxzZWlmIG9iaiBhbmQgb2JqLlBhcmVudCB0aGVuIG9iajpEZXN0cm95KCkgZW5kCiAgICAgICAgZW5kCiAgICAgICAgZXNwT2JqZWN0c1N1cnZpdm9yc1ttb2RlbF0gPSBuaWwKICAgIGVuZAplbmQK",
        "bG9jYWwgZnVuY3Rpb24gdG9nZ2xlU3Vydml2b3JFU1A oZW5hYmxlKQogICAgaWYgZW5hYmxlIHRoZW4KICAgICAgICBmb3IgbW9kZWwgaW4gcGFpcnMoZXNwT2JqZWN0c1N1cnZpdm9ycykgZG8gcmVtb3ZlU3Vydml2b3JFU1AobW9kZWwpIGVuZAogICAgICAgIGZvciBfLCBtb2RlbCBpbiBpcGFpcnMoc3Vydml2b3JzRm9sZGVyOkdldENoaWxkcmVuKCkpIGRvIGNyZWF0ZVN1cnZpdm9yRVNQKG1vZGVsKSBlbmQKICAgICAgICBlc3BPYmplY3RzU3Vydml2b3JzLmNvbm5lY3Rpb25zID0gewogICAgICAgICAgICBzdXJ2aXZvcnNGb2xkZXIuQ2hpbGRBZGRlZDpDb25uZWN0KGZ1bmN0aW9uKG1vZGVsKQogICAgICAgICAgICAgICAgdGFzay53YWl0KDAuNSkKICAgICAgICAgICAgICAgIGNyZWF0ZVN1cnZpdm9yRVNQKG1vZGVsKQogICAgICAgICAgICBlbmQpLAogICAgICAgICAgICBzdXJ2aXZvcnNGb2xkZXIuQ2hpbGRSZW1vdmVkOkNvbm5lY3QocmVtb3ZlU3Vydml2b3JFU1ApCiAgICAgICAgfQogICAgZWxzZQogICAgICAgIGZvciBtb2RlbCBpbiBwYWlycyhlc3BPYmplY3RzU3Vydml2b3JzKSBkbyByZW1vdmVTdXJ2aXZvckVTUChtb2RlbCkgZW5kCiAgICAgICAgaWYgZXNwT2JqZWN0c1N1cnZpdm9ycy5jb25uZWN0aW9ucyB0aGVuCiAgICAgICAgICAgIGZvciBfLCBjIGluIGlwYWlycyhlc3BPYmplY3RzU3Vydml2b3JzLmNvbm5lY3Rpb25zKSBkbyBjOkRpc2Nvbm5lY3QoKSBlbmQKICAgICAgICAgICAgZXNwT2JqZWN0c1N1cnZpdm9ycy5jb25uZWN0aW9ucyA9IG5pbAogICAgICAgIGVuZAogICAgZW5kCmVuZAoK",
        "LS0gIPCfh7MgR2VuZXJhdG9yIEVTUApsb2NhbCBmdW5jdGlvbiBhcHBseUdlbmVyYXRvckVTUChnZW5lcmF0b3IpCiAgICBpZiBnZW5lcmF0b3JFU1BPYmplY3RzW2dlbmVyYXRvcl0gdGhlbiByZXR1cm4gZW5kCiAgICBpZiBub3QgZ2VuZXJhdG9yOkZpbmRGaXJzdENoaWxkKCJQcm9ncmVzcyIpIHRoZW4gcmV0dXJuIGVuZAoKICAgIGxvY2FsIGhpZ2hsaWdodCA9IEluc3RhbmNlLm5ldygiSGlnaGxpZ2h0IikKICAgIGhpZ2hsaWdodC5QYXJlbnQgPSBnZW5lcmF0b3IKICAgIGhpZ2hsaWdodC5BZG9ybmVlID0gZ2VuZXJhdG9yOkZpbmRGaXJzdF RoaWNoSXNBIChCYXNlUGFydCIpIG9yIGdlbmVyYXRvci5QcmltYXJ5UGFydAogICAgaGlnaGxpZ2h0LkZpbGxUcmFuc3BhcmVuY3kgPSAwLjUKICAgIGhpZ2hsaWdodC5EZXB0aE1vZGUgPSBFbnVtLkhpZ2hsaWdodERlcHRoTW9kZS5BbHdheXNPblRvcAoKICAgIGxvY2FsIGJpbGxib2FyZCA9IEluc3RhbmNlLm5ldygiQmlsbGJvYXJkR3VpIikKICAgIGJpbGxib2FyZC5QYXJlbnQgPSBnZW5lcmF0b3IKICAgIGJpbGxib2FyZC5BZG9ybmVlID0gZ2VuZXJhdG9yOkZpbmRGaXJzdF RoaWNoSXNBIChCYXNlUGFydCIpIG9yIGdlbmVyYXRvci5QcmltYXJ5UGFydAogICAgYmlsbGJvYXJkLlNpemUgPSBVRGltMi5uZXcoMCwgMTAwLCAwLCA0MCkKICAgIGJpbGxib2FyZC5TdHVkc09mZnNldCA9IFZlY3RvcjMubmV3KDA sIDMsIDApCiAgICBiaWxsYm9hcmQuQWx3YXlzT25Ub3AgPSB0cnVlCgogICAgbG9jYWwgdGV4dExhYmVsID0gSW5zdGFuY2UubmV3KCJUZXh0TGFiZWwiKQogICAgdGV4dExhYmVsLlBhcmVudCA9IGJpbGxib2FyZAogICAgdGV4dExhYmVsLlNpemUgPSBVRGltMi5uZXcoMSwgMCwgMSwgMCkKICAgIHRleHRMYWJlbC5CYWNrZ3JvdW5kVHJhbnNwYXJlbmN5ID0gMQogICAgdGV4dExhYmVsLlRleHRTY2FsZWQgPSB0cnVlCiAgICB0ZXh0TGFiZWwuRm9udCA9IEVudW0uRm9udC5Hb3RoYW1Cb2xkCiAgICB0ZXh0TGFiZWwuVGV4dFN0cm9rZVRyYW5zcGFyZW5jeSA9IDAKICAgIHRleHRMYWJlbC5UZXh0U3Ryb2tlQ29sb3IzID0gQ29sb3IzLmZyb21SVEIoMCwgMCwgMCkKCiAgICBsb2NhbCBwcm9ncmVzc1ZhbHVlID0gZ2VuZXJhdG9yOkZpbmRGaXJzdENoaWxkKCJQcm9ncmVzcyIpCiAgICBsb2NhbCBmdW5jdGlvbiB1cGRhdGVHZW5lcmF0b3JTdGF0dXMoKQogICAgICAgIGlmIHByb2dyZXNzVmFsdWUgYW5kIHByb2dyZXNzVmFsdWUuVmFsdWUgPj0gMTAwIHRoZW4KICAgICAgICAgICAgaGlnaGxpZ2h0LkZpbGxDb2xvciA9IENvbG9yMy5mcm9tUlRCKDA sIDI1NSwgMCkKICAgICAgICAgICAgaGlnaGxpZ2h0Lk91dGxpbmVDb2xvciA9IENvbG9yMy5mcm9tUlRCKDA sIDIwMCwgMCkKICAgICAgICAgICAgdGV4dExhYmVsLlRleHRDb2xvciMgPSBDb2xvciMuZnJvbVJUQigwLCAyNTUsIDApCiAgICAgICAgICAgIHRleHRMYWJlbC5UZXh0ID0gIkZJWEVEIgogICAgICAgIGVsc2UKICAgICAgICAgICAgaGlnaGxpZ2h0LkZpbGxDb2xvciA9IENvbG9yMy5mcm9tUlRCKDI1NSwgMCwgMCkKICAgICAgICAgICAgaGlnaGxpZ2h0Lk91dGxpbmVDb2xvciA9IENvbG9yMy5mcm9tUlRCKDIwMCwgMCwgMCkKICAgICAgICAgICAgdGV4dExhYmVsLlRleHRDb2xvciMgPSBDb2xvciMuZnJvbVJUQigyNTUsIDAsIDApCiAgICAgICAgICAgIHRleHRMYWJlbC5UZXh0ID0gcHJvZ3Jlc3NWYWx1ZSBhbmQgKG1hdGguZmxvb3IocHJvZ3Jlc3NWYWx1ZS5WYWx1ZSkgLi4gIiUiKSBvciAiTk9UIEZJWEVEIgogICAgICAgIGVuZAogICAgZW5kCiAgICB1cGRhdGVHZW5lcmF0b3JTdGF0dXMoKQogICAgbG9jYWwgY29ubgogICAgaWYgcHJvZ3Jlc3NWYWx1ZSB0aGVuIGNvbm4gPSBwcm9ncmVzc1ZhbHVlOkdldFByb3BlcnR5Q2hhbmdlZFNpZ25hbCgiVmFsdWUiKTpDb25uZWN0KHVwZGF0ZUdlbmVyYXRvclN0YXR1cykgZW5kCiAgICBnZW5lcmF0b3JFU1BPYmplY3RzW2dlbmVyYXRvcl0gPSB7IGhpZ2hsaWdodCwgYmlsbGJvYXJkLCBjb25uIH0KZW5kCgpsb2NhbCBmdW5jdGlvbiByZW1vdmVHZW5lcmF0b3JFU1AoZ2VuZXJhdG9yKQogICAgaWYgZ2VuZXJhdG9yRVNQT2JqZWN0c1tnZW5lcmF0b3JdIHRoZW4KICAgICAgICBmb3IgXywgb2JqIGluIGlwYWlycyhnZW5lcmF0b3JFU1BPYmplY3RzW2dlbmVyYXRvcl0pIGRvCiAgICAgICAgICAgIGlmIHR5cGVvZihvYmopID09ICJSQlhTY3JpcHRDb25uZWN0aW9uIiB0aGVuIG9iaqpEaXNjb25uZWN0KCkKICAgICAgICAgICAgZWxzZWlmIG9iaiBhbmQgb2JqLlBhcmVudCB0aGVuIG9iajpEZXN0cm95KCkgZW5kCiAgICAgICAgZW5kCiAgICAgICAgZ2VuZXJhdG9yRVNQT2JqZWN0c1tnZW5lcmF0b3JdID0gbmlsCiAgICBlbmQKZW5kCgpsb2NhbCBmdW5jdGlvbiB0b2dnbGVHZW5lcmF0b3JFU1A oZW5hYmxlKQogICAgaWYgZW5hYmxlIHRoZW4KICAgICAgICBsb2NhbCBtYXBGb2xkZXIgPSB3b3Jrc3BhY2U6RmluZEZpcnN0Q2hpbGQoIk1hcCIpIGFuZCB3b3Jrc3BhY2UuTWFwOkZpbmRGaXJzdENoaWxkKCJJbmdhbWUiKSBhbmQgd29ya3NwYWNlLk1hcC5JbmdhbWU6RmluZEZpcnN0Q2hpbGQoIk1hcCIpCiAgICAgICAgaWYgbWFwRm9sZGVyIHRoZW4KICAgICAgICAgICAgZm9yIF8sIGdlbmVyYXRvciBpbiBpcGFpcnMobWFwRm9sZGVyOkdldENoaWxkcmVuKCkpIGRvCiAgICAgICAgICAgICAgICBpZiBnZW5lcmF0b3IuTmFtZSA9PSAiR2VuZXJhdG9ycyIgdGhlbiBhcHBseUdlbmVyYXRvckVTUChkK SBlbmQKICAgICAgICAgICAgZW5kCiAgICAgICAgZ2VuZXJhdG9yRVNQT2JqZWN0cy5jb25uZWN0aW9ucyA9IHsKICAgICAgICAgICAgd29ya3NwYWNlLkRlc2NlbmRhbnRBZGRlZDpDb25uZWN0KGZ1bmN0aW9uKGQpCiAgICAgICAgICAgICAgICBpZiBkLk5hbWUgPT0gIkdlbmVyYXRvcnMiIGFuZCBkOklzQSgiTW9kZWwiKSB0aGVuIHRhc2sud2FpdCgwLjUpIGFwcGx5R2VuZXJhdG9yRVNQKGQpIGVuZAogICAgICAgICAgICBlbmQpLAogICAgICAgICAgICB3b3Jrc3BhY2UuRGVzY2VuZGFudFJlbW92aW5nOkNvbm5lY3QocmVtb3ZlR2VuZXJhdG9yRVNQKQogICAgICAgIH0KICAgIGVsc2UKICAgICAgICBmb3IgZ2VuZXJhdG9yIGluIHBhaXJzKGdlbmVyYXRvckVTUE9iamVjdHMpIGRvIHJlbW92ZUdlbmVyYXRvckVTUChkZWwpIGVuZAogICAgICAgIGlmIGdlbmVyYXRvckVTUE9iamVjdHMuY29ubmVjdGlvbnMgdGhlbgogICAgICAgICAgICBmb3IgXyw gYyBpbiBpcGFpcnMoZ2VuZXJhdG9yRVNQT2JqZWN0cy5jb25uZWN0aW9ucykgZG8gYzpEaXNjb25uZWN0KCkgZW5kCiAgICAgICAgICAgIGdlbmVyYXRvckVTUE9iamVjdHMuY29ubmVjdGlvbnMgPSBuaWwKICAgICAgICBlbmQKICAgIGVuZAplbmQK",
        "LS0g8J+HsyBUaGluZ3MgVGFiClRoaW5nc1RhYjo gQ3JlYXRlVG9nZ2xlKHsKICAgIE5hbWUgPSAiS2lsbGVycyBFU1AiLAogICAgQ3VycmVudFZhbHVlID0gZmFsc2UsCiAgICBGbGFnID0gIktpbGxlcnNFU1AiLAogICAgQ2FsbGJhY2sgPSBmdW5jdGlvbihWYWx1ZSkgZXNwRW5hYmxlZEtpbGxlcnMgPSBWYWx1ZSB0b2dnbGVLaWxsZXJFU1AoVmFsdWUpIGVuZA p9KQpUaGluZ3NUYWI6Q3JlYXRlVG9nZ2xlKHsKICAgIE5hbWUgPSAiU3Vydml2b3JzIEVTUCIsCiAgICBDdXJyZW50VmFsdWUgPSBmYWxzZSwKICAgIEZsYWcgPSAiU3Vydml2b3JzRVNQIiwKICAgIENhbGxiYWNrID0gZnVuY3Rpb24oVmFsdWUpIGVzcEVuYWJsZWRTdXJ2aXZvcnMgPSBWYWx1ZSB0b2dnbGVTdXJ2aXZvckVTUChWYWx1ZSkgZW5kCn0pClRoaW5nc1RhYjpDcmVhdGVUb2dnbGUoewogICAgTmFtZSA9ICJHZW5lcmF0b3IgRVNQIiwKICAgIEN1cnJlbnRWYWx1ZSA9IGZhbHNlLAogICAgRmxhZyA9ICJHZW5lcmF0b3JFU1AiLAogICAgQ2FsbGJhY2sgPSBmdW5jdGlvbihWYWx1ZSkgZ2VuZXJhdG9yRVNQRW5hYmxlZCA9IFZhbHVlIHRvZ2dsZUdlbmVyYXRvckVTUChWYWx1ZSkgZW5kCn0pCgotLSDwn4ezIEtyeXRoZXIgVGFiCktyeXRoZXJUYWI6Q3JlYXRlTGFiZWwoIkhlcmUgYXJlIHRoZSBmdW5jdGlvbnMgdGhhdCBl aHJlciBkaWQgbm90IGtub3cgaG93IHRvIGNsYXNzaWZ5LiIpCktyeXRoZXJUYWI6Q3JlYXRlQnV0dG9uKHsKICAgIE5hbWUgPSAiVW5sb2NrIFRWVElNRSwgSUxvdmVDYXRzIGFuZCBNZWV0QnJhbmRvbiIsCiAgICBDYWxsYmFjayA9IGZ1bmN0aW9uKCkKICAgICAgICBpZiBub3Qgd29ya3NwYWNlOkdldEF0dHJpYnV0ZSgiVGVzdGluZyIpIHRoZW4KICAgICAgICAgICAgbG9jYWwgTmV0d29yayA9IHJlcXVpcmUoZ2FtZS5SZXBsaWNhdGVkU3RvcmFnZS5Nb2R1bGVzLk5ldHdvcms pCiAgICAgICAgICAgIE5ldHdvcms6RmlyZVNlcnZlckNvbm5lY3Rpb24oIlVubG9ja0FjaGlldmVtZW50IiwgIlJFTU9URV9FVkVOVCIsICJUVlRJTUU iKQogICAgICAgICAgICBnYW1lLlJlcGxpY2F0ZWRTdG9yYWdlLk1vZHVsZXMuTmV0d29yay5SZW1vdGVFdmVudDpGaXJlU2VydmVyKCJVbmxvY2tBY2hpZXZlbWVudCIsIk1lZXRCcmFuZG9uIikKICAgICAgICAgICAgZ2FtZS5SZXBsaWNhdGVkU3RvcmFnZS5Nb2R1bGVzLk5ldHdvcmsuUmVtb3RlRXZlbnQ6RmlyZVNlcnZlcigiVW5sb2NrQWNoaWV2ZW1lbnQiLCJJTG92ZUNhdHMiKQogICAgICAgIGVuZAogICAgZW5kCn0pCgotLSDwn4ezIFN0YW1pbmEgVGFiClN0YW1pbmFUYWI6Q3JlYXRlVG9nZ2xlKHsKICAgIE5hbWUgPSAiSW5maW5pdGUgU3RhbWluYVYxIiwKICAgIEN1cnJlbnRWYWx1ZSA9IGZhbHNlLAogICAgRmxhZyA9ICJJbmZpbml0ZVN0YW1pbmFWMSIsCiAgICBDYWxsYmFjayA9IGZ1bmN0aW9uKHYpCiAgICAgICAgbG9jYWwgbW9kID0gcmVxdWlyZShnYW1lLlJlcGxpY2F0ZWRTdG9yYWdlLk1vZHVsZXMuU3ByaW50aW5nKQogICAgICAgIGlmIHYgdGhlbgogICAgICAgICAgICBtb2QuTWF4U3RhbWluYSA9IDEwMDAwMDAwMAogICAgICAgICAgICBtb2QuU3RhbWluYUdhaW4gPSAxMDAwMDAwMDAKICAgICAgICBlbHNlCiAgICAgICAgICAgIG1vZC5NYXhTdGFtaW5hID0gMTAwCiAgICAgICAgICAgIG1vZC5TdGFtaW5hR2FpbiA9IDEwCiAgICAgICAgZW5kCiAgICBlbmQKfSkK",
        "LS0g8J+HsyBQbGF5ZXIgVGFiIChBbnRpIERlYXRoKQpsb2NhbCBBbnRpRGVhdGhDb25uZWN0aW9uClBsYXllclRhYjpDcmVhdGVUb2dnbGUoewogICAgTmFtZSA9ICJBbnRpIERlYXRoIiwKICAgIEN1cnJlbnRWYWx1ZSA9IGZhbHNlLAogICAgRmxhZyA9ICJBbnRpRGVhdGgiLAogICAgQ2FsbGJhY2sgPSBmdW5jdGlvbih2KQogICAgICAgIGxvY2FsIHBsYXllciA9IGdhbWUuUGxheWVycy5Mb2NhbFBsYXllcgogICAgICAgIGxvY2FsIGNoYXJhY3RlciA9IHBsYXllci5DaGFyYWN0ZXIgb3IgcGxheWVyLkNoYXJhY3RlckFkZGVkOldhaXQoKQogICAgICAgIGxvY2FsIGhycCA9IGNoYXJhY3RlcjpXYWl0Rm9yQ2hpbGQoIkh1bWFub2lkUm9vdFBhcnQiKQoKICAgICAgICBsb2NhbCBmdW5jdGlvbiBjaGVja0tpbGxlcnMoKQogICAgICAgICAgICBpZiBub3QgdCB0aGVuIHJldHVybiBlbmQKICAgICAgICAgICAgZm9yIF8sIGtpbGxlciBpbiBpcGFpcnMoa2lsbGVyc0ZvbGRlcjpHZXRDaGlsZHJlbigpKSBkbgogICAgICAgICAgICAgICAgbG9jYWwga0hS UCA9IGtpbGxlcjpGaW5kRmlyc3RDaGlsZCgiSHVtYW5vaWRSb290UGFydCIpCiAgICAgICAgICAgICAgICBpZiBrSFJQIGFuZCAoaHJwLlBvc2l0aW9uIC0ga0hSUC5Qb3NpdGlvbikuTWFnbml0dWRlIDwgMTUgdGhlbgogICAgICAgICAgICAgICAgICAgIGxvY2FsIHRlbGV2aXNvciA9IHdvcmtzcGFjZTpGaW5kRmlyc3RDaGlsZCgiTWFwIikgYW5kIHdvcmtzcGFjZS5NYXA6RmluZEZpcnN0Q2hpbGQoIkxvYmJ5IikgYW5kIHdvcmtzcGFjZS5NYXAuTG9iYnk6RmluZEZpcnN0Q2hpbGQoIlRlbGV2aXNvciIpCiAgICAgICAgICAgICAgICBpZiB0ZWxldmlzb3IgdGhlbgogICAgICAgICAgICAgICAgICAgIGxvY2FsIHRlbGVIUlAgPSB0ZWxldmlzb3I6RmluZEZpcnN0Q2hpbGQoIkh1bWFub2lkUm9vdFBhcnQiKSBvciB0ZWxldmlzb3IuUHJpbWFyeVBhcnQgb3IgdGVsZXZpc29yOkZpbmRGaXJzdF RoaWNoSXNBIChCYXNlUGFydCkKICAgICAgICAgICAgICAgICAgICBpZiB0ZWxlSFJQIHRoZW4gaHJwLkNGcmFtZSA9IHRlbGVIUlAuQ0ZyYW1lICsgVmVjdG9yMy5uZXcoMCwgMywgMCkgZW5kCiAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgZW5kCiAgICAgICAgICAgIGVuZAogICAgICAgIGVuZAoKICAgICAgICBpZiB2IHRoZW4gQW50aURlYXRoQ29ubmVjdGlvbiA9IGdhbWU6R2V0U2VydmljZShcIlJ1blNlcnZpY2VcIikuSGVhcnRiZWF0OkNvbm5lY3QoY2hlY2tLaWxsZXJzKQogICAgICAgIGVsc2VpZiBBbnRpRGVhdGhDb25uZWN0aW9uIHRoZW4gQW50aURlYXRoQ29ubmVjdGlvbjpEaXNjb25uZWN0KCkgQW50aURlYXRoQ29ubmVjdGlvbiA9IG5pbCBlbmQKICAgIGVuZA p9KQo=",
    }
    local concat = table.concat
    local B = concat(C)
    local function rev(s) local r='' for i=#s,1,-1 do r=r..s:sub(i,i) end return r end
    local encoded = rev(rev(B))

    local function _B64D(data)
        local b='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
        data = string.gsub(data,'[^'..b..'=]','')
        return (data:gsub('.',function(x)
            if (x == '=') then return '' end
            local r,f='',(string.find(b,x)-1)
            for i=6,1,-1 do r=r..(f%2^i - f%2^(i-1) > 0 and '1' or '0') end
            return r
        end):gsub('%d%d%d?%d?%d?%d?%d?%d?',function(x)
            if (#x ~= 8) then return '' end
            local c=0
            for i=1,8 do c=c + (x:sub(i,i)=='1' and 2^(8-i) or 0) end
            return string.char(c)
        end))
    end

    local ok,err = pcall(function()
        local src = _B64D(encoded)
        local f = loadstring(src)
        if not f then error('decoder failed') end
        return f()
    end)
    if not ok then warn('Onion Critical Error:', err) end
end
